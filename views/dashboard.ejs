<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="shopify-api-key" content="<%= SHOPIFY_API_KEY %>" />
  <title>Shipping Owl Dashboard</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
      background: #f6f6f7;
      padding: 2rem;
    }

    button {
      background: #5c6ac4;
      color: white;
      border: none;
      border-radius: 4px;
      margin: 0.5rem 0.5rem 0 0;
      padding: 0.5rem 1rem;
      font-size: 1rem;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    button:disabled {
      background: #a0a5d6;
      cursor: not-allowed;
    }

    button:hover:not(:disabled) {
      background-color: #4b56a3;
    }

    #output {
      margin-top: 1.5rem;
      white-space: pre-wrap;
      border: 1px solid #ccc;
      padding: 1rem;
      background: white;
      min-height: 100px;
      font-family: monospace;
    }
  </style>

  <!-- Shopify App Bridge -->
  <script src="https://cdn.shopify.com/shopifycloud/app-bridge.js"></script>
  <script src="https://unpkg.com/@shopify/app-bridge@3"></script>
  <script src="https://unpkg.com/@shopify/app-bridge-utils@3"></script>
</head>

<body>
  <h1>üöÄ Shipping Owl Dashboard</h1>
  <p>Local products in DB: <strong>
      <%= productCount %>
    </strong></p>

  <script>
    console.log("üßÆ EJS productCount rendered:", "<%= productCount %>");
  </script>

  <button id="seed">Seed Dummy Products</button>
  <button id="sync">Sync Products to Shopify</button>
  <button id="fetch">Fetch Orders from Shopify</button>
  <a href="/apps/upsell/campaigns?shop=<%= shop %>&host=<%= host %>">
    <button>Manage Upsell Campaigns</button>
  </a>
  <div id="output"></div>

  <script>
    document.addEventListener('DOMContentLoaded', async function () {
      console.log('[AppBridge] DOM loaded');

      const AppBridge = window['app-bridge'];
      const AppBridgeUtils = window['app-bridge-utils'];
      const actions = AppBridge.actions;
      const createApp = AppBridge.default;

      const hostParam = new URLSearchParams(location.search).get("host");
      console.log('[AppBridge] Host param:', hostParam);

      if (!hostParam) {
        console.error('[AppBridge] Missing host param in URL');
        return;
      }

      const app = createApp({
        apiKey: "<%= SHOPIFY_API_KEY %>",
        host: hostParam,
        forceRedirect: true,
      });

      const { getSessionToken } = AppBridgeUtils; // ‚úÖ Add this line

      getSessionToken(app).then((token) => {
        fetch("/campaigns", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        })
          .then(res => res.json())
          .then(data => {
            console.log("Campaigns data:", data);
          })
          .catch(err => console.error("Error loading campaigns:", err));
      });

      window.appBridge = {
        app,
        utils: AppBridgeUtils
      };

      console.log('[AppBridge] Initialized successfully:', window.appBridge);
    });
  </script>


  <script>
    const output = document.getElementById('output');
    const buttons = {
      seed: document.getElementById('seed'),
      sync: document.getElementById('sync'),
      fetch: document.getElementById('fetch')
    };

    console.log("üîò Buttons initialized:", buttons);
    console.log("üì§ Output element:", output);

    async function waitForAppBridge() {
      console.log('‚è≥ Waiting for AppBridge to be ready...');
      return new Promise((resolve) => {
        const check = () => {
          if (window.appBridge && window.appBridge.utils && window.appBridge.app) {
            console.log('‚úÖ AppBridge is ready');
            resolve(window.appBridge);
          } else {
            setTimeout(check, 100);
          }
        };
        check();
      });
    }

    buttons.seed.addEventListener('click', () => {
      console.log('üß™ Seed button clicked');
      callApi('/seed-products');
    });

    buttons.sync.addEventListener('click', () => {
      console.log('üîÑ Sync button clicked');
      callApi('/sync-products');
    });

    buttons.fetch.addEventListener('click', () => {
      console.log('üì• Fetch button clicked');
      callApi('/fetch-orders');
    });

    async function callApi(path) {
      try {
        console.log('üöÄ Starting API Call to:', path);

        const { app, utils } = await waitForAppBridge();
        console.log('üîß Resolved AppBridge:', { app, utils });

        let token;
        try {
          console.log('üîê Getting session token...');
          token = await utils.getSessionToken(app);
          console.log('üõ°Ô∏è Session Token:', token);
        } catch (tokenErr) {
          console.error('‚ùå Failed to get session token:', tokenErr);
          output.textContent = '‚ùå Failed to get session token.';
          return;
        }

        console.log('üì§ Sending fetch to:', path);
        console.log('üì§ Headers:', { Authorization: `Bearer ${token}` });

        const res = await fetch(path, {
          method: 'GET',
          headers: {
            Authorization: `Bearer ${token}`
          }
        });

        console.log('üì° Status:', res.status, res.statusText);
        console.log('üìÑ Response Headers:', [...res.headers.entries()]);

        const text = await res.text();
        console.log('üì¶ Response Text:', text);

        if (!res.ok) {
          console.error('‚ùå HTTP Error:', res.status, res.statusText, '\n\n', text);
          throw new Error(`HTTP ${res.status} - ${res.statusText}\n\n${text}`);
        }

        output.textContent = text;
        console.log('‚úÖ Output set successfully.');
      } catch (err) {
        console.error('üî• Error in callApi:', err);
        console.error('üî• Error stack:', err.stack || err);
        output.textContent = '‚ùå Error: ' + err.message;
      }
    }

    // Global JS error logger
    window.addEventListener('error', function (e) {
      console.error('‚ö†Ô∏è Global JS Error:', e.message, '\n', e.error);
    });

    window.addEventListener('unhandledrejection', function (e) {
      console.error('‚ö†Ô∏è Unhandled Promise Rejection:', e.reason);
    });
  </script>
  <footer style="text-align: center; margin-top: 20px;">
    <a href="/privacy-policy" target="_blank">Privacy Policy</a> |
    <a href="/terms-of-use" target="_blank">Terms of Use</a>
  </footer>

</body>

</html>